{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAkBeA,EAfA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAClC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACzB,6BAAKA,EAAWC,YAGtB,sCAASR,KACT,qBAAKS,IAAKR,EAAOS,IAAI,SCqClBC,G,MA9CH,WACV,IADgB,EAIYC,mBAAS,IAJrB,mBAIXC,EAJW,KAIFC,EAJE,OAKUF,mBAAS,IALnB,mBAKXG,EALW,KAKHC,EALG,OAMQJ,mBAAS,UANjB,mBAMXK,EANW,KAMJC,EANI,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,uBAAM0B,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SAd1C,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAcf,wBAAQ9B,UAAU,gBAAgB6B,KAAK,SAAvC,uBAEF,qBAAK7B,UAAU,UAAf,SACCU,EAAQP,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAAQN,MAAOM,EAAOA,OAAO+B,MAAOpC,SAAUK,EAAOA,OAAOL,SAAUC,MAAOI,EAAOA,OAAOJ,MAAOC,YAAaG,EAAOA,OAAOH,wBC/BtHmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.c56dd358.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({title,calories,image,ingredients}) => {\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient=>(\r\n                  <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>Cal: {calories}</p>\r\n            <img src={image} alt=\"\" /> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n  const APP_ID = 'e969bd6a';\n  const APP_KEY = '2ec0bd55778e328be04a2b856f572c9a';\n\nconst [recipes, setRecipes] = useState([]);\nconst [search, setSearch] = useState(\"\");\nconst [query, setQuery] = useState('paneer');\n\n\n  useEffect(()=>{\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className='search-form'>\n        <input className='search-bar' type=\"text\" value={search} onChange={updateSearch} />\n        <button className='search-button' type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients} />\n      ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1TSyA\"};"],"sourceRoot":""}